MODULE 7: DESIGN PATTERNS FOR PAGES WITH .NET
HOME TASK
1.	Convert your project from previous hometask (Selenium WebDriver Basics, hometask #1) to match Page Object / Page Factory patterns. For writing tests and implementation, use WebDriver API and NUnit.
2.	Implement additional test scenarios (define with your mentor) with Page Object / Page Factory to get 3 scenarios as total.
BONUS TASK
•	Add mechanism (function/method) which automatically will switch PO depends on which page we are on at the current moment.

ACCEPTANCE CRITERIA
1.	Page Objects have consistent structure (decomposition of PO is right).
2.	Test scenarios are clear, stable and good structured.
3.	There is at least one level of inheritance between pages (Abstract Page exists).
4.	There is no code duplication at all.
5.	Inner implementation of PO is hidden from tests.
6.	Naming and Code Conventions should be followed.



MODULE 8: SELENIUM WD ADVANCED WITH .NET: ACTIONS, JAVASCRIPT EXECUTOR, SELENIUM SERVER + SELENIUM GRID
HOME TASK
1.	Convert your project from previous home tasks (Selenium WebDriver, home task #1, #2) – add at least 2 new Actions implementations (for example: 1 for mouse actions and 1 for keyboard).
•	If current SUT does not allow to implement any Actions – add some pages for Yandex Disk and implement some Actions on it (such as drag-n-drop (delete a file dragging to the trash bin), context menu actions, multi-selecting files, etc)
2.	Add at least 2 implementation of JavaScript Executor usage (for example: implement element highlighter, JS Executor based clicker or element finder);
3.	Set up Selenium Grid with at least two nodes and run all your test suites on the grid. (Run tests with Firefox and Chrome)
to start hub => java -jar hub.jar -role hub
to start node => java -jar gridNode.jar -role webdriver -hub http://localhost:4444/grid/register -port 5566
BONUS TASK
•	At least one node in Selenium Grid is launched on non-Windows platform. (In case you don’t have access to appropriate physical machines use Virtual Box or create a free demo Sauce Labs account).
•	Make your tests cross-browser.
•	Parallel execution via grid can be done as optional task.

ACCEPTANCE CRITERIA
1.	2 or more actions are added to the project. (Have a complex structure – a sequence of several operations).
2.	2 or more implementation of JavaScript Executor usage are added to the project. 
3.	There is a rational explanation to use exactly this JavaScript Executor methods and usage of this methods brings profit to the project.
4.	Selenium Grid is correctly set up. Different capabilities are used during set up.
5.	There is no code duplication at all.
6.	Naming and Code Conventions should be followed.


MODULE 9: TEST AUTOMATION FRAMEWORKS BASICS (.NET)
HOME TASK
Update your automated tests from previous module (WebDriver) with new project structure *:

1.	Create packages for page objects, tests/steps, business objects, utils.
2.	Create business objects as C# classes and use them in your tests (e.g. user with 2 parameters - name and password).
3.	Create some utility classes according to the test flow needs.
BONUS TASK
Implement your test scenario (or part of it, if it is possible) using some ready-made Selenium wrapper/framework (e.g. Selenide, Serenity, JDI, HtmlElements)
Logging or screenshotting can be done as well, but will be covered in upcoming module on reporting and analysis topics.
ACCEPTANCE CRITERIA
1.	Packages for page objects, tests/steps, business objects, utils are created and contain relevant classes.
2.	Business objects as dedicated C# classes and used/invoked during the test flow.
3.	Utility classes are created according to the test flow needs.
4.	BONUS TASK: Fully functional C# implementation of test scenario using some ready-made Selenium wrapper/framework (e.g. Selenide, Serenity, JDI, HtmlElements) is delivered to a mentor.
