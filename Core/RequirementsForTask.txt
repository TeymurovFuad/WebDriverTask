MODULE 7: DESIGN PATTERNS FOR PAGES WITH .NET
HOME TASK
1.	Convert your project from previous hometask (Selenium WebDriver Basics, hometask #1) to match Page Object / Page Factory patterns. For writing tests and implementation, use WebDriver API and NUnit.
2.	Implement additional test scenarios (define with your mentor) with Page Object / Page Factory to get 3 scenarios as total.
BONUS TASK
•	Add mechanism (function/method) which automatically will switch PO depends on which page we are on at the current moment.

ACCEPTANCE CRITERIA
1.	Page Objects have consistent structure (decomposition of PO is right).
2.	Test scenarios are clear, stable and good structured.
3.	There is at least one level of inheritance between pages (Abstract Page exists).
4.	There is no code duplication at all.
5.	Inner implementation of PO is hidden from tests.
6.	Naming and Code Conventions should be followed.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

MODULE 8: SELENIUM WD ADVANCED WITH .NET: ACTIONS, JAVASCRIPT EXECUTOR, SELENIUM SERVER + SELENIUM GRID
HOME TASK
1.	Convert your project from previous home tasks (Selenium WebDriver, home task #1, #2) – add at least 2 new Actions implementations (for example: 1 for mouse actions and 1 for keyboard).
•	If current SUT does not allow to implement any Actions – add some pages for Yandex Disk and implement some Actions on it (such as drag-n-drop (delete a file dragging to the trash bin), context menu actions, multi-selecting files, etc)
2.	Add at least 2 implementation of JavaScript Executor usage (for example: implement element highlighter, JS Executor based clicker or element finder);
3.	Set up Selenium Grid with at least two nodes and run all your test suites on the grid. (Run tests with Firefox and Chrome)
to start hub => java -jar hub.jar -role hub
to start node => java -jar gridNode.jar -role webdriver -hub http://localhost:4444/grid/register -port 5566
BONUS TASK
•	At least one node in Selenium Grid is launched on non-Windows platform. (In case you don’t have access to appropriate physical machines use Virtual Box or create a free demo Sauce Labs account).
•	Make your tests cross-browser.
•	Parallel execution via grid can be done as optional task.

ACCEPTANCE CRITERIA
1.	2 or more actions are added to the project. (Have a complex structure – a sequence of several operations).
2.	2 or more implementation of JavaScript Executor usage are added to the project. 
3.	There is a rational explanation to use exactly this JavaScript Executor methods and usage of this methods brings profit to the project.
4.	Selenium Grid is correctly set up. Different capabilities are used during set up.
5.	There is no code duplication at all.
6.	Naming and Code Conventions should be followed.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

MODULE 9: TEST AUTOMATION FRAMEWORKS BASICS (.NET)
HOME TASK
Update your automated tests from previous module (WebDriver) with new project structure *:

1.	Create packages for page objects, tests/steps, business objects, utils.
2.	Create business objects as C# classes and use them in your tests (e.g. user with 2 parameters - name and password).
3.	Create some utility classes according to the test flow needs.
BONUS TASK
Implement your test scenario (or part of it, if it is possible) using some ready-made Selenium wrapper/framework (e.g. Selenide, Serenity, JDI, HtmlElements)
Logging or screenshotting can be done as well, but will be covered in upcoming module on reporting and analysis topics.
ACCEPTANCE CRITERIA
1.	Packages for page objects, tests/steps, business objects, utils are created and contain relevant classes.
2.	Business objects as dedicated C# classes and used/invoked during the test flow.
3.	Utility classes are created according to the test flow needs.
4.	BONUS TASK: Fully functional C# implementation of test scenario using some ready-made Selenium wrapper/framework (e.g. Selenide, Serenity, JDI, HtmlElements) is delivered to a mentor.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

MODULE 10: DESIGN PATTERNS IN TA FRAMEWORKS IMPLEMENTATION (.NET)
HOME TASK
1.	Implement the following design patterns in your solution from previous module*:
a.	Singleton
b.	Factory Method
c.	Decorator
You can use any area of you code to apply the pattern (any code layer – test, service or page object and their combinations). 
You may consult with your mentor about the specific area of applying the pattern as well, but try to make a self-dependent final decision.
2.	Revise your code to match S.O.L.I.D. principles. Fix Provide list of corrections to your mentor, e.g.:
Class	Problem	Solution
WebDriverManager	Class single responsibility is broken. Contains methods irrelevant to browser/WD management.	Dedicated class XYZ is created for utility methods, some are shifted to abstract PO class.
HomePage	Open-closed principle is broken.
Fields of the PO class are exposed (public), some redundant methods are present.	Fields of the PO class are set private, redundant/extra methods are eliminated from HomePage PO class and shifted to the class XYZ, which extends HomePage

BONUS TASK
Implement any extra pattern mentioned during the training session (for extra mark) or any other pattern instead of the list above. Exact pattern list should be discussed with your mentor.
ACCEPTANCE CRITERIA
1.	PATTERNS: All patterns from mandatory part (Singleton, Factory Method, Decorator, or other 3 confirmed) should be implemented.
2.	PATTERNS: Classes which were modified/created during pattern implementation should be invoked during the test run. Just storing them in project packages is NOT enough.
3.	S.O.L.I.D.: Code is revised to match S.O.L.I.D. principles. 
4.	S.O.L.I.D.: at least 3 fixes are described within the table per example above and delivered to a mentor.
5.	S.O.L.I.D.: fixes are implemented in code structure. 
6.	BONUS TASK: extra patterns mentioned during the training session are implemented considering criteria from point #2 above.

[*] discuss assignment specifics with your mentor or choose any other suitable 3 patterns 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Module 11: DBB FRAMEWORK
Adopt the previous home task (WebDriver project with patterns implemented) to make possible test execution with Specflow. Follow relevant configuration steps for MsTest/Nunit depending on the existing project architecture.
ACCEPTANCE CRITERIA
1.	At least one test should use "Scenario Outline" keyword and “Examples:” section.
2.	Apply “Background” keyword for preconditions/recurrent steps.
3.	Use filtering/regular expressions in Gherkin step definitions for parametrization and flexibility.

[*] discuss assignment specifics with your mentor
[*] discuss any bonus task with your mentor (should be relevant to an assignment)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

MODULE 12: AUTOMATED TESTING OF WEB SERVICES WITH .NET
HOME TASK
if mentee's project has something to do with REST web-services, the tasks that are described below should be done using a mentee's REST web-service. Mentor is allowed to tailor given tasks to mentee’s REST web-service without losing a sense of the given tasks. Otherwise, it should be done using the provided REST web-service. 
1.	Create a test to verify an http status code:
o	Send the http request by using the GET method.
o	The URL is https://jsonplaceholder.typicode.com/users
o	Validation: status code of the obtained response is 200 OK
2.	Create a test to verify an http response header:
o	Send the http request by using the GET method. 
o	The URL is https://jsonplaceholder.typicode.com/users
o	Validation: - the content-type header exists in the obtained response
                                    - the value of the content-type header is application/json; charset=utf-8
3.	Create a test to verify an http response body:
o	Send the http request by using the GET method:
o	The URL is https://jsonplaceholder.typicode.com/users
o	Validation: the content of the response body is the array of 10 users
BONUS TASK
•	Tests are created using any http client and serialization/deserialization libraries.
•	Implemented additional tests (defined with your mentor) for the GitHub gist using REST API. The implemented tests should be done using the following http methods: post, put, delete and patch. The documentation of the API is located here.

ACCEPTANCE CRITERIA
1.	Tests should be created using Rest Based Template.
2.	Tests have to include validations that are given.
3.	Implemented tests should be readable.
4.	Tests must be implemented so that they could be launched in parallel.
5.	Naming and Code Conventions should be followed.
6.	As for tests of the bonus task, they should be created to test CRUD operations of the given resource.
